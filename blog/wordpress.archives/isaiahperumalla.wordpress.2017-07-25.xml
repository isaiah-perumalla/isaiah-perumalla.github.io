<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2017-07-25 17:48"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Isaiah Perumalla</title>
<link>https://isaiahperumalla.wordpress.com</link>
<description>Thoughts on Programming  ....</description>
<pubDate>Tue, 25 Jul 2017 17:48:01 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://isaiahperumalla.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>isaiahperumalla</wp:author_login>
  <wp:author_email>isaiahperumalla@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[isaiahperumalla]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title>Isaiah Perumalla</title>
		<link>https://isaiahperumalla.wordpress.com</link>
	</image>
	<item>
  <title>Object Oriented or Class Oriented Design?</title>
  <link>https://isaiahperumalla.wordpress.com/2007/07/03/object-oriented-or-class-oriented-design/</link>
  <pubDate>Tue, 03 Jul 2007 11:13:28 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/2007/07/03/object-oriented-or-class-oriented-design/</guid>
  <description/>
  <content:encoded><![CDATA[Its been over 40 years since object orentation as a programming pradigm started in Norway when Kristen Nygaard and Ole-Johan Dahl invented the language Simula . Now a days most software is describe their work using some sort of object vocabulary and or use an OO language. However the ubiquity of object oriented languages does not mean, in experience most developers aren't getting the full leverage out of object technology. Object orientation is a programming paradigm you can design object oriented software and implement it using almost any programming language, of course some languages offer you more support than others, conversly you can implement your software with a very non object oriented implemetation using an 'Object Oriented Language' such C#, Java or even Smalltalk. Object oriented design and object thinking trancends programming languages. So it not the tools or programming language you use to implement the software, but its the way you think about a design. Thinking in objects is the key to leveraging the most out of object technology to create elegantly designed software. <a title="Trygve Reenskaug" href="http://heim.ifi.uio.no/~trygver/">Trygve Reenskuag </a>creator of the MVC pattern, and the creator of the <a title="OORAM book" href="http://heim.ifi.uio.no/~trygver/1996/book/WorkingWithObjects.pdf">OORAM software Engineering Method </a>comments that programming languages are class oriented rather than object oriented, thats why most of us end up thinking and modelling in terms of classes rather than objects. A Class is powerful abstraction to implement objects, but its inadequate for modelling and thinking about objects, because a Class is static, it is defined at build time, objects on the other hand are dynamic.

<em>Objects vs Classes</em>

It's important to understand the difference between a class and an objects, I remember when I was at university learning C++ people used the term class and objects interchagably, it is key to distintguish between the two. A class can be viewed as template that defines a set of characteristics and behaviours an object will have, a class is also a factory which creates specific instances of objects that have these general characteristics and behaviours. In languages like Smalltalk a class is an object, that is responsible for creating instances of objects with a particular class of behaviours and charateristics.

Similarly it is important to distinguish between 'Object thinking' and 'Class thinking' when desgning Object Oriented software. Thinking and modelling a solution to a problem by thinking in terms of various classes rather than thinking of a group of objects working together, more often that not results in a implementation that is inelegant and rigid.

<em>Object Thinking</em>

David West has written an excellent book titled <a title="Object Thinking" href="http://www.amazon.com/Object-Thinking-DV-Microsoft-Professional-David/dp/0735619654" target="_blank">"Object Thinking"</a> (I highly recommend this book to every developer). Thinking in terms of classes, focuses our attention on the solution space rather than the problem space. A class is very static by thinking in terms of classes our solution tends to be static and rigid, objects on the other hand are dynamic, by thinking in Objects we let the problem define our solution, which leads to modelling a more natural and elegant solution. Think about an object as "A virtual person that is capable of performing certain tasks. who has access to all the knowledge and resources required to complete its assigned tasks". What we will have is a cooperating community of <span class="emphasis">virtual persons interacting with each other to solve a problem. Thinking in terms of objects will lead to a closer match between your object model and the business model (the enterprise domain). Thinking in objects also helps us find the naturally occurring divisions and classifications in the problem space.</span>

<span class="emphasis">Consider the following example, there is a Club that has different types of members, GoldMember, SilverMember and StandardMember, all members have a name, address, date of birth etc, but each type of member has a different discount Rate.</span>

<span class="emphasis">thinking in terms of classes we usually come up with the following implementation, using class inheritance</span>

<span class="emphasis"><a title="Class Diagram" href="http://isaiah.uk.com/wp-content/uploads/2007/07/classdiagram1.gif"><img src="http://isaiah.uk.com/wp-content/uploads/2007/07/classdiagram1.gif" alt="Class Diagram" /></a></span>

<span class="emphasis">The above is a workable solution, but its kind of rigid. Suppose we have an object which is an instance of class SilverMember, think back to the 'Object as a Person' metaphor. suppose this virtual person (ie this object which is instance of SilverMember) wants to upgrade to a gold membership. What happends now ? with the above implementation you would have to create a new instance of class GoldMember. Class are static defined at build time, objects on the other had are dynamic, that is why it is important to think in terms of objects and the various Roles they play when modelling. In the real world all you would do is get a new gold membership card or something like that. </span>

<span class="emphasis">thinking along these lines we could come up with the following implemetation</span>

<span class="emphasis"><a title="Implemetation Using Object Composition" href="http://isaiah.uk.com/wp-content/uploads/2007/07/classdiagram2.gif"><img src="http://isaiah.uk.com/wp-content/uploads/2007/07/classdiagram2.gif" alt="Implemetation Using Object Composition" /></a></span>

<span class="emphasis">in this implementation we have a solution that uses object composition, a member object has a Membership object. In the above solution it trival to plugin different membership objects into the member object. so if a SliverMember wants to upgrade to a GoldMembership all we do is set member Objects membership property to an instance of GoldMemberShip and discard its old SiverMembership.</span>

<span class="emphasis">The above solution is example of the strategy pattern in action. Thinking in terms of objects and modelling in terms of the Roles the objects play, leads to a elegant solution.</span>

<span class="emphasis">To conclude object orientation is a pradigm, its a way of thinking. A Class is great and a powerful abstraction for the implementation of objects, so most OO programming languages are class oriented because they are all about implemention of computer programs. But for modelling and designing object oriented solutions it is important we think in term of objects and the Roles the objects play. <a title="Trygve Reenskaug" href="http://heim.ifi.uio.no/~trygver/themes/roles/roles-index.html" target="_blank">Trygve Reenskaug</a> has written numerous articles and an excellent <a title="Woking with Objects" href="http://heim.ifi.uio.no/~trygver/1996/book/WorkingWithObjects.pdf">book</a> on role modelling </span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>2007-07-03 11:13:28</wp:post_date>
  <wp:post_date_gmt>2007-07-03 11:13:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>object-oriented-or-class-oriented-design</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="object-oriented-design"><![CDATA[Object Oriented Design]]></category>
  <category domain="post_tag" nicename="smalltalk"><![CDATA[Smalltalk]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>73</wp:comment_id>
    <wp:comment_author><![CDATA[regan222]]></wp:comment_author>
    <wp:comment_author_email>webmaster@whitesoftware.com</wp:comment_author_email>
    <wp:comment_author_url>http://regan222.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>208.180.114.12</wp:comment_author_IP>
    <wp:comment_date>2010-04-24 03:11:13</wp:comment_date>
    <wp:comment_date_gmt>2010-04-24 03:11:13</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Interesting article.  Is the membership object in your example not just a property of the member object?  Is a property considered a seperate object?  I am fighting with a design as we speak.  I have a program for a church that keeps up with weekly deposits.  I have offerings,  members, visitors, services, etc as objects but I am having trouble getting them to interact.  Is there a good source of information to find out how to make objects create other objects?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>13346562</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-04-24 03:11:13</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>70</wp:comment_id>
    <wp:comment_author><![CDATA[gratoftrawcic]]></wp:comment_author>
    <wp:comment_author_email>iws564@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://anthonysblog.wiftp.net/</wp:comment_author_url>
    <wp:comment_author_IP>173.20.84.83</wp:comment_author_IP>
    <wp:comment_date>2009-11-26 06:23:54</wp:comment_date>
    <wp:comment_date_gmt>2009-11-26 06:23:54</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I highly enjoyed reading your article, keep up posting such exciting articles.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-11-26 06:23:54</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>71</wp:comment_id>
    <wp:comment_author><![CDATA[Fred]]></wp:comment_author>
    <wp:comment_author_email>aloskutov@gmx.com</wp:comment_author_email>
    <wp:comment_author_url>http://jamesdavies.sbs.ox.ac.uk/cs/members/play-online-casino-game.aspx</wp:comment_author_url>
    <wp:comment_author_IP>92.113.130.129</wp:comment_author_IP>
    <wp:comment_date>2010-01-19 22:35:17</wp:comment_date>
    <wp:comment_date_gmt>2010-01-19 22:35:17</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[thank you, very interesting idea]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2010-01-19 22:35:17</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Object Persistence ??</title>
  <link>https://isaiahperumalla.wordpress.com/2007/10/24/object-persistence/</link>
  <pubDate>Wed, 24 Oct 2007 11:14:59 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/2007/10/24/object-persistence/</guid>
  <description/>
  <content:encoded><![CDATA[In software development, programming only represents half the problem, the other problem is storing and sharing data across users and other programs. The Object oriented paradigm expands the meaning of "data". Object contains methods, complex data structures and references to other objects. This can’t be easily stored in a relational Database.

Although it is possible to store objects in a relational database, we <em>can’t</em> overlook the underlying conceptual differences between the relational and object paradigm. This is common know as the <strong><a href="http://en.wikipedia.org/wiki/Object-Relational_impedance_mismatch" title="impedance mismatch">impedance mismatch</a></strong> .

we can define objects in terms of classes and create hierarchies of these classes, now to effectively store objects, a database must be able store inheritance hierarchies and create instances of these classes using this information. Relational database were never designed to handle <span style="font-size:7.5pt;line-height:115%;font-family:'Verdana','sans-serif';">hierarchical structures </span>like this. As Developers we spend a lot of time to work around these limitations to try and make it all fit, knowing very well there is an obvious  underlying mismatch. Let take a very trivial example, suppose we have an Address class which was mapped to an Address Table. Now suppose there was a requirement to handle new types of address which contained an additional field. On the object level we could create a subclass of Address and define an extra variable to hold this additional field. Now on the relational database we would typically create another table to hold this additional information with a link to the Address table. Now this requires construction an object from multiple tables, now as the object structure get complex this can be very time consuming.

Most object oriented designs contain composite objects and usually there are complex patterns of interaction between these objects. Objects hold reference to other objects, to allow fast navigational access. Relational databases on the other hand can also handle these nested structures but they have no references so navigational access is not possible but they have is associative access which based on matching data, this process is very slow and depending on the complexity of the nested object structures, this can be a time consuming process. A study done by the US navy showed relational database are 100 to 1000 times slower than a database that can provide navigational access.

As mentioned before the object paradigm expands the meaning of "data", one of the fundamental characteristics of Object Oriented design is encapsulation. Objects contain methods as well as data, this means storing methods and data as one package and maintain cohesion between the two. Generally relational database cannot support this, relational databases have stored procedures but this is usually programmed using Sql (Original intent of SQL was never intended for programming but to be used by the end user). This is always different to the programming language used to implement the objects.

In my opinion relational database introduces barriers to object thinking, objects allows us to think in terms of real objects such as customer, products, items. When they are stored in a relational database they are dissembled into different tables. rather than thinking about the domain model, we try to design our object model so they can be chopped up later into some low level data which bears little resemblance to the original object just so they can some how fit into a relational database. This is the same as having to disassemble your car every time you wanted to park it in your garage. Not only that you stored each part in a different garage, you have a garage where every body put there car wheels, another garage where every one stored their car body. And when you want to use your car again in the morning, you had to go to each garage identify the part that belong to your car, then assemble it before you can drive your car again, how painfully inefficient, but this is essentially what happened when we store Objects in a relational database.

O/R mapping are great for some problems (check out <a href="http://www.glorp.org/" title="GLORP">GLORP</a>) but really they don’t solve the underlying impedance mismatch problem, it might insulate the mapping from the developer to a certain extent, but really you still disassembling your car before parking in the garage, its just being done by someone else.

Can a Object Oriented Database provide the perfect solution ?]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>4</wp:post_id>
  <wp:post_date>2007-10-24 11:14:59</wp:post_date>
  <wp:post_date_gmt>2007-10-24 11:14:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>object-persistence</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
  <category domain="post_tag" nicename="impedance-mismatch"><![CDATA[Impedance Mismatch]]></category>
  <category domain="post_tag" nicename="object-oriented-database"><![CDATA[Object Oriented Database]]></category>
  <category domain="category" nicename="object-oriented-design"><![CDATA[Object Oriented Design]]></category>
</item>
<item>
  <title>My journey to Smalltalk</title>
  <link>https://isaiahperumalla.wordpress.com/2008/03/15/my-journey-to-smalltalk/</link>
  <pubDate>Sat, 15 Mar 2008 23:54:30 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=5</guid>
  <description/>
  <content:encoded><![CDATA[Ever since I started my professional career as a software developer back in 2002, nearly all of my development was done using C sharp and .NET framework with a bit of Java here and there. However while studying software engineering at University of Sydney 90% of my work was done on unix machines, I was taught object oriented programming in my first year,  and thankfully we didn’t get introduced to OO by learning C++ or Java but a language called Blue (it was first developed by the Basser Computer Science department at the University of Sydney to teach students OO concepts) .  Blue was not just a programming language but was a programming environment, which allowed interactive manipulation of classes and their relationship to each other graphically or textually. This allowed me to visualize a group of instantiated objects whose state was encapsulated and only way the objects performed anything was by collaborating with each other sending messages to each other to perform a task.

As I learned mainstream languages like C++ and Java. The idea of objects sending messages was blurred by multiple inheritance, classes and types. Throughout the years as I read books, researched and experimented with different ideas, I noticed Smalltalk being reference numerous times in every book OO book and every time Objects, XP and TDD were discussed. Xp and TDD were all conceived in the Smalltalk community and some of my favorite authors like Kent Beck, Rebecca Wriffs-Brock and the numerous speakers at OOPSLA every year all had a Smalltalk background. So about a year ago I decided to check out and learn this Smalltalk thing. It was a steep learning curve in the beginning (especially getting used to the idea of not working with source files) it was a big paradigm shift but it the best thing I did, there such a long history and wealth of experience in the Smalltalk community. Just browsing through code base in the standard squeak Smalltalk image, studying the wonderfully crafted code which was refined and polished by master Smalltalk craftsman over the last 25 years has improved my understanding of good OO design and also increased my productivity in my day job using C sharp and .NET. After experiencing Smalltalk and programming with "live objects", going back to C sharp or java seems a little dull at times they are not nearly as expressive as Smalltalk. While learning squeak Smalltalk and as I immersed myself into the Smalltalk culture, I stumbled across <a href="http://www.seaside.st">Seaside</a> a framework to create web based applications entirely in Smalltalk. Seaside kind of blew my mind, I have dabbled with Rails a bit and it is very clean and can be very productive, but Seaside takes web based development to a whole new level I never seen highly complex web based applications developed this way. Well it wasn't long before I discovered <a href="http://www.gemstone.com/smalltalk">GemStone/S</a> which is not just an OO database but a powerful object server based on Smalltalk (more on this in another post). Through Smalltalk I rediscovered just how powerful it is to think in terms of objects not classes and just be able to send any message to *any* object that can understand that message. Now I realize that OO is more about message passing and actually very little to do with classes, inheritance or types. I found this quote by Allan Kay where he states what OO is all about.

“OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP. There are possibly other systems in which this is possible, but I’m not aware of them.” -  Alan Kay creator of Smalltalk]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>5</wp:post_id>
  <wp:post_date>2008-03-15 23:54:30</wp:post_date>
  <wp:post_date_gmt>2008-03-15 23:54:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>my-journey-to-smalltalk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="seaside"><![CDATA[Seaside]]></category>
  <category domain="post_tag" nicename="smalltalk"><![CDATA[Smalltalk]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>17</wp:comment_id>
    <wp:comment_author><![CDATA[Halfbaked Ideas &raquo; Blog Archive &raquo; OOP in erlang]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://erl.nfshost.com/wordpress/2008/03/16/oop-in-erlang/</wp:comment_author_url>
    <wp:comment_author_IP>64.38.220.145</wp:comment_author_IP>
    <wp:comment_date>2008-04-24 21:35:34</wp:comment_date>
    <wp:comment_date_gmt>2008-04-24 21:35:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] read this quote on the blog of Isaiah Perumalla, in the post called My Journey to Smalltalk:  “OOP to me means only messaging, local retention and protection and hiding of state-process, [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-04-24 21:35:34</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>16</wp:comment_id>
    <wp:comment_author><![CDATA[Top Posts &laquo; WordPress.com]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://botd.wordpress.com/2008/03/17/top-posts-689/</wp:comment_author_url>
    <wp:comment_author_IP>72.232.153.48</wp:comment_author_IP>
    <wp:comment_date>2008-03-16 23:59:04</wp:comment_date>
    <wp:comment_date_gmt>2008-03-16 23:59:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...]  My journey to Smalltalk Ever Since i started my professional career as a software developer back in 2002, nearly all of my development was done [&#8230;] [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-03-16 23:59:04</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>43</wp:comment_id>
    <wp:comment_author><![CDATA[Jack]]></wp:comment_author>
    <wp:comment_author_email>jhughes@openxtra.co.uk</wp:comment_author_email>
    <wp:comment_author_url>http://www.openxtra.co.uk/blog/</wp:comment_author_url>
    <wp:comment_author_IP>81.130.171.141</wp:comment_author_IP>
    <wp:comment_date>2008-06-11 13:51:23</wp:comment_date>
    <wp:comment_date_gmt>2008-06-11 13:51:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Whilst I admire Smalltalk it has some question marks over it when it comes to deployment of the finished application...have any recent developments addressed that?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-11 13:51:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>44</wp:comment_id>
    <wp:comment_author><![CDATA[isaiahperumalla]]></wp:comment_author>
    <wp:comment_author_email>cappadonza@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>78.105.10.215</wp:comment_author_IP>
    <wp:comment_date>2008-06-11 14:15:03</wp:comment_date>
    <wp:comment_date_gmt>2008-06-11 14:15:03</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[When it come to deployment, what are you most concerned about ?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>2192464</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-11 14:15:03</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>55</wp:comment_id>
    <wp:comment_author><![CDATA[Matt Dunn]]></wp:comment_author>
    <wp:comment_author_email>contact@mattonsoftware.com</wp:comment_author_email>
    <wp:comment_author_url>http://mattonsoftware.com</wp:comment_author_url>
    <wp:comment_author_IP>209.5.189.114</wp:comment_author_IP>
    <wp:comment_date>2008-08-14 16:58:29</wp:comment_date>
    <wp:comment_date_gmt>2008-08-14 16:58:29</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Theres a great paper that Alan wrote many moons ago on the early history of Smalltalk, it provides a fantastic insight into how the language developed early on, would highly recommend it if you haven't seen it before: http://lambda-the-ultimate.org/node/153

Cheers,
Matt]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-14 16:58:29</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>TDD thinking</title>
  <link>https://isaiahperumalla.wordpress.com/2008/01/21/tdd-thinking/</link>
  <pubDate>Mon, 21 Jan 2008 14:21:40 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/2008/01/21/tdd-thinking/</guid>
  <description/>
  <content:encoded><![CDATA[Test Driven Development (TDD) is gaining more and more acceptance in mainstream development, it is easy to be misled and think about TDD in terms of only testing your code (the word "Test" in TDD adds to the misunderstanding). When thinking about TDD from a test centric view, it seem odd and feels rather unnatural to write unit tests before implementing the units. Thinking in a test centric manner what tends to happen is we ending up implementing our objects and only then we write some tests to verify the behavior of the objects we just implemented. Taking this approach we loose one of the key benefits of TDD, which is the guidance and feedback it gives on our low level design. In Test Driven Development, tests are used to communicate the intent of our design and motivate our design, to leverage this it is essential to write the tests first.

Writing the tests first allows you to drive out low level design of your software from a client perspective. What do I mean by this? TDD forces you to think about how the object is going to be used, when designing an object, I imagine the object already exists and i think about it from client point of view (i.e. how is this object going to be used, who does it need to collaborate with to fulfill its responsibility), now to do this i write some code that sends a message (i.e. call a method) to my imaginary object, and then Assert what would happened when I send a particular message to my object. (This now has become my unit spec or Unit Test). Now I go ahead an implement the object so it meets the executable spec we just wrote.

Developing this way the low level object design is guided and shaped by the unit specs (unit test), now if we find it difficult to write an executable unit spec to verify a new feature in isolation, that’s an indication that the low level design of your software is poor and its time to do some refactoring

when you implement your object without an executable unit spec (unit test) first written up, your low level design is not guided by anything except by the high level conceptual design, and regardless of how good the high level design may be it very likely you will introduce some hidden dependencies and tightly couple your object to a dependency at a lower level. Now Thinking of TDD as a low level design aid, and not in terms of tests, it doesn't seem odd or unnatural to write executable unit specifications ("unit test") before implementing your object. TDD has more to do with design than actual testing.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2008-01-21 14:21:40</wp:post_date>
  <wp:post_date_gmt>2008-01-21 14:21:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tdd-thinking</wp:post_name>
  <wp:status>private</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="test-driven-design"><![CDATA[Test Driven Design]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Test Driven Design using mocks – Lessons learnt (Part 1)</title>
  <link>https://isaiahperumalla.wordpress.com/2008/04/25/test-driven-design-using-mocks-%e2%80%93-lessons-learnt-part-1/</link>
  <pubDate>Fri, 25 Apr 2008 12:59:30 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=7</guid>
  <description/>
  <content:encoded><![CDATA[<p class="MsoNormal"><strong><span>Lesson 1 - <em>“Specify conversations between objects an abstract enough level”</em></span></strong></p>
<p class="MsoNormal"><strong></strong>A common complaint with using mock objects is that interaction based tests ties your tests to the implementation details of the production code and interaction based tests are tracking the implementation of the method you’re testing. I felt this many times previously, every time I refactored my production code some of my tests seem to break even though, functionality of the object remained the same. Often mocks and interaction based testing are blamed for brittle tests. I have come to realize any brittleness exposed by interaction based tests is just a symptom of an over specified test or their is an underlying design issue because of a weak interaction model.</p>
Interaction tests will be brittle and tied to the implementation if you dont specify interactions at the right level, and your tests will quickly let you know. After spending time doing some development in the <a href="http://seaside.st" target="_blank">Smalltalk world</a>, i rediscovered that OO is all about message passing (object interactions). So a good OO model must have a good interaction model, with this in mind i have come to realize that the key to interaction based testing is specifying interactions (or conversations) between an object and its collaborators at the right level. An object should tell its collaborator what it should get done and not how it should do it. This drives us not to include even a hint of implementation detail when designing our interactions between the object under test and it collaborator, this forces us to create collaborator interface at an abstract enough so that no implementation details gets in the way, this leads to what is often called interface discovery of the collaborating objects, and is a great exploratory way to design the interface of collaborators and distribute responsibilities between objects and mocks are a vital tool to do this. This is what <a href="http://mockobjects.com/" target="_blank">Steve Freeman and Nat Pryce</a> have been telling us all along, but its only now I’m starting to understand this. However i also learnt not to use mocks everywhere, generally if I cannot model interactions between an object and its collaborator at an abstract enough level that made sense to the calling objects domain, it generally means i'm unable to define a clear <a href="http://martinfowler.com/bliki/RoleInterface.html">role interface</a> for the collaborating object, then in this case i would not use mocks at all, rather I tend to use a real object or a stub and test a cluster of objects together.
So what do I mean by “Specifying conversations between objects an abstract level”. I will try explaining by giving an example in the <a href="http://isaiahperumalla.wordpress.com/2008/05/28/test-driven-design-using-mocks-lessons-learnt-part-2/">next post</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>7</wp:post_id>
  <wp:post_date>2008-04-25 12:59:30</wp:post_date>
  <wp:post_date_gmt>2008-04-25 12:59:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>test-driven-design-using-mocks-%e2%80%93-lessons-learnt-part-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="interaction-based-tests"><![CDATA[interaction based tests]]></category>
  <category domain="post_tag" nicename="mock-object"><![CDATA[mock object]]></category>
  <category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
  <category domain="category" nicename="test-driven-design"><![CDATA[Test Driven Design]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Smalltalk still fascinanting</title>
  <link>https://isaiahperumalla.wordpress.com/?p=8</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=8</guid>
  <description/>
  <content:encoded><![CDATA[<strong>
</strong>

<strong>Message Passing</strong>

<em>"OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things. It can be done in Smalltalk and in LISP. There are possibly other systems in which this is possible, but I'm not aware of them."</em> - <em>Alan Kay creator of Smalltalk</em>

OO is more about object interaction through message passing, than to do with types and classes. One of the key features of smalltalk is <em>message passing</em>, only way to execute a method or get anything done in smalltalk is to send a message, which is done by dynamically binding a selector (name of the message) to a method at runtime and not at compile time. Message passing preserves encapsulation which is key characteristic of Object Orientation . since every thing is done by passing a message to an object, unlike most conventional languages, there are no special keywords or constructs to define control structures such as if statements or loops. everything including control structures are done by passing message to objects.
<code>
example in java or C#</code><code>
<strong>if(user.IsAuthenticated())
{
request.Send(externalSystem);
}
"In Smalltalk"
request canSend ifTrue:[ request send: externalSystem]</strong></code><code> </code>the above might like like simple difference in syntax, but there is a big difference, in the C# / java version the if branch is created by using a built in if keyword, which is built into the language.

in the smalltalk there are no such keywords, everything is done by sending messages to objects. we are passing a message to a boolean object with a block of code as its parameter<strong>. (ie we calling a method ifTrue on a Boolean object, and we are passing a block of code as the parameter for the method)</strong>

<strong>No Source Files, just a world of living objects</strong>

<em>One of the tricks here is to get away from thinking that programs have to be composed with only a simple text editor. -- Alan Kay</em>

In most programming languages, this is what typically happens the developers create text files that are fed to a compiler and loader which then becomes an executable program. One can tell how early- or late-bound a system is by looking at the things that can be changed while the program is running. For example, it is generally true of C based systems that most changes in the program have to be done by going back to the text files, changing them, and recompiling and loading them. This is even true of Java.

Smalltalk can change pretty much everything while it is running -- in fact, both these systems are so good at this that their development systems are written in themselves and are active during runtime. For example, a program change in Smalltalk takes less than a second to take effect, thus many more bugs can be run down and fixed.

But late-bound has some deeper and more profound properties that include abilities to actually change the both the structure and metastructure of the language itself. Thus an important new idea can be assimilated into the constantly evolving process that is the system.

Another aspect of late-binding is the ability to change one's mind about already instantiated structures that are already doing work. These can be changed automatically on the fly without harming the work they are already doing.

<strong>eXtreme Late Binding</strong>

Since everything in smalltalk is an Object, all specifications of all program constructs (classes, methods, etc.) are living objects that exist both at compile time and at runtime—and these objects can be accessible to a running program, they can be queried, modified by sending them messages. Smalltalk's reflective model is very simple yet very powerful, An instance can query it's class and at runtime can find out what methods are defined directly and in superclasses. It can use that information to it's advantage so that, for example, it can execute a method without knowing that method at compile time, it can not only fully introspect on itself, but it can also change its self at runtime. To think about it in a smalltalk image there is really no distinction between compile time and runtime. Smalltalk is written in Smalltalk. You can view how the language is put together to learn the language, and you can change anything that you don't like about it, So effectively Smalltalk can change itself.

<strong>Smalltalk can be your DSL</strong>

Smalltalk is written in Smalltalk. Smalltalk can be your own DSL (Domain Specific Language). Smalltalk code is very elegant, readable and easy to understand, it allows the developers to focus on the problem domain, using language and notation that is natural to that domain.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>8</wp:post_id>
  <wp:post_date>2011-09-12 12:20:08</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="smalltalk"><![CDATA[Smalltalk]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Test Driven Design using mocks- Lessons Learnt (Part 2)</title>
  <link>https://isaiahperumalla.wordpress.com/2008/05/28/test-driven-design-using-mocks-lessons-learnt-part-2/</link>
  <pubDate>Wed, 28 May 2008 22:19:56 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=9</guid>
  <description/>
  <content:encoded><![CDATA[This is a follow up to my previous <a href="../2008/04/25/test-driven-design-using-mocks-%E2%80%93-lessons-learnt-part-1/" target="_self"><span style="color:blue;">post</span></a>. In this somewhat contrived example we are building a point of sale system and there is a requirement to print out a receipt for a sale, which includes item details, total taxes and the total amount due.
Using Rinho mocks Here is the first test I wrote initially, which drove out the need
for a Renderer role, whose responsibility is to render the contents of the receipt
onto an output device

[TestFixture]
public class SalesTests
{
private MockRepository mockery;

[SetUp]
public void BeforeTest()
{
mockery = new MockRepository();
}

[TearDown]
public void AfterTest()
{
mockery.VerifyAll();
}

[Test]
public void ShouldbeAbleToPrintReceiptForASaleWithNoItems()
{
var sale = new Sale();
var renderer = mockery.StrictMock&lt;IRender&gt;();
renderer.Render(”Total Taxes: 0.00 \n Total: 0.00″);
mockery.ReplayAll();
sale.PrintReceiptOn(renderer);

}
}
the implementation needed to pass the above test was as follows

public interface Renderer{
void render(String s);
}
public class Sale {

public void PrintReceiptOn(IRender renderer)
{
renderer.Render(”Total Taxes: 0.00 \n Total: 0.00″);
}

By driving the design test first I was able to discover the need for an object to play the Renderer role, using mocks I was able to drive out interface for the Renderer role.
But I also realised later the above test was brittle and over specified, because
the test was very tightly coupled to the implementation, because the conversation between the objects was not at the right level.
for instance if I changed the implementation of printReceiptOn on the Sale object to

public void PrintReceiptOn(IRender renderer)
{

renderer.Render(”Total Taxes: 0.00″);
renderer.Render(”Total: “);
renderer.Render(”0.00″);
}

The test will break (because the test specifies the Render message be sent to the renderer only once with a specific argument) although the implementation is
quite valid. So the test is tightly coupled to the implementation
Now we could try addressing the symptom by defining a looser constraint on the test as shown below

[Test]
public void ShouldbeAbleToPrintReceiptForASaleWithNoItems()
{
var sale = new Sale();
var renderer = mockery.StrictMock&lt;IRender&gt;();
renderer.Render(”Total: 0.00″);
LastCall.Repeat.AtLeastOnce().IgnoreArguments();
mockery.ReplayAll();
sale.PrintReceiptOn(renderer);

With the above either of my previous implementation would make the
test pass. however it  doesn’t test the right data was being rendered.

To ensure that the right data was being rendered
We could write a state-based   using a collecting stub to verify the data being
rendered is correct as shown below
[Test]

public void VerifyReceiptContentsForSaleWithNoItems() {
TestRenderer renderingDevice = new TestRenderer();
sale.printReceiptOn(renderingDevice);
Assert.assertEquals(”Total Taxes: 0.00 \n Total: 0.00″,
renderingDevice.GetContents());

}

where TestRenderer is a collecting stub which is implemented as follows

public class TestRenderer  : IRenderer {
private String contents;

public void Render(String s) {
contents += s;
}
public String GetContents() {
return contents;
}
}
At this point I was questioning the usefulness of a mock, it seemed I was better off using a state based test and using a colleting stub to verify. The brittleness of our initial interaction based test, indicated an underlying design issue,  interaction was not specified at the right level.  The trick here is to design interactions that are meaningful to the calling object, this leads to interface discovery, (and this is one of the reasons <a href="http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html">why you should not mock 3rd party API's</a>). Now Render(string s) is not a meaningful message to the Sale object to be sending to the Renderer, the Sale object knows about items, taxes and total so What would have been more a meaningful interaction (conversation ) between the Sale object and Renderer would be to specify the interaction in terms of taxes, items and total, as shown below.

[Test]
public void ShouldbeAbleToPrintReceiptOnAPrinterForSaleWithNoItems()
{
renderer.RenderTaxes(0.0m);
renderer.RenderTotal(0.0m);
mockery.ReplayAll();
saleUnderTest.PrintReceiptOn(printer);
}
public interface Renderer {
void RenderTotal(decimal total);
void RenderTaxes(decimal taxes);
}

the following is now the implementation of the PrintReceiptOn method of the Sale Object

public void PrintReceiptOn(IRender renderer)
{

renderer.RenderTaxes(totalTaxes);
renderer.RenderTotal(total);
}
This is where mock objects are so useful as they aid in the discovery of interfaces and quickly give us feedback in the form of brittle tests when interactions between objects are poorly designed.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2008-05-28 22:19:56</wp:post_date>
  <wp:post_date_gmt>2008-05-28 22:19:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>test-driven-design-using-mocks-lessons-learnt-part-2</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="interaction-based-tests"><![CDATA[interaction based tests]]></category>
  <category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
  <category domain="category" nicename="test-driven-design"><![CDATA[Test Driven Design]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_oembed_dab4746c997c1b631c2014bc36376e95</wp:meta_key>
    <wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[Test Driven Design using mocks – Lessons learnt (Part 1) &laquo; Isaiah Perumalla]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://isaiahperumalla.wordpress.com/2008/04/25/test-driven-design-using-mocks-%e2%80%93-lessons-learnt-part-1/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.69.35</wp:comment_author_IP>
    <wp:comment_date>2008-05-28 22:32:48</wp:comment_date>
    <wp:comment_date_gmt>2008-05-28 22:32:48</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] between objects an abstract level”. I will try explaining by giving an example in the next post Possibly related posts: (automatically generated)TDD [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-05-28 22:32:48</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>59</wp:comment_id>
    <wp:comment_author><![CDATA[Aaron VonderHaar]]></wp:comment_author>
    <wp:comment_author_email>gruen0aermel@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://www.avh4.net</wp:comment_author_url>
    <wp:comment_author_IP>68.8.92.224</wp:comment_author_IP>
    <wp:comment_date>2009-01-27 19:02:22</wp:comment_date>
    <wp:comment_date_gmt>2009-01-27 19:02:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[That's a great article!  It really shows the thought process of how TDD works, and how it can lead to better design.

Although now I'm a bit curious about the process that motivated you to create a Sale#PrintReceiptOn(Renderer) method rather than creating a Renderer#PrintSale(Sale) method.  Have you talked about that type of design decision in any of your other blog posts?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-01-27 19:02:22</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>60</wp:comment_id>
    <wp:comment_author><![CDATA[isaiahperumalla]]></wp:comment_author>
    <wp:comment_author_email>cappadonza@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>204.209.209.129</wp:comment_author_IP>
    <wp:comment_date>2009-02-03 20:41:32</wp:comment_date>
    <wp:comment_date_gmt>2009-02-03 20:41:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[@Aaron
Thanks, thats a good question. this example was simply to demonstrate TDD using mocks. 
An alternate solution would be Renderer#PrintSale(Sale), this probably makes more sense depending on the domain. I will write a post on some of the alternatives and the refactoring the interaction model.

you might find this article useful <a href="http://msdn.microsoft.com/en-ca/magazine/dd882516.aspx" rel="nofollow">http://msdn.microsoft.com/en-ca/magazine/dd882516.aspx</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>2192464</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-02-03 20:41:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>205</wp:comment_id>
    <wp:comment_author><![CDATA[Pedro]]></wp:comment_author>
    <wp:comment_author_email>pjmv1986@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://oopdesignmaderight.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>217.217.196.96</wp:comment_author_IP>
    <wp:comment_date>2012-04-10 23:32:31</wp:comment_date>
    <wp:comment_date_gmt>2012-04-10 23:32:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Actually, putting it like

Sale#PrintReceiptOn(Renderer)

makes more sense, if both taxes and item subtotals belong to the Sale class (which is the case, if I'm right). This way, we're delegating the rendering responsibility to another object, without breaking encapsulation. The latter would happen if the call were made like Renderer#PrintSale(Sale); the renderer would need to ask the sale about its data in order to render something. Remember, "Tell, Don't Ask" ;)

Cheers.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>34403682</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:14:"1334100752.378";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"pjmartos";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1338845764</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1338845764.8639";s:7:"message";s:54:"isaiahperumalla changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"isaiahperumalla";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-04-10 23:32:31</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Why GemStone/S </title>
  <link>https://isaiahperumalla.wordpress.com/2008/11/21/why-gemstones/</link>
  <pubDate>Fri, 21 Nov 2008 22:48:54 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=10</guid>
  <description/>
  <content:encoded><![CDATA[Most business software systems are built using the object oriented paradigm, one of the key concepts of OO is encapsulation and that the data and behavior be packaged together and the distinction between the two be hidden within the object. In every company and client i have worked for one of the biggest assumptions made is the idea that programs and data should be stored separately, storing data separately violates encapsulation at the most fundamental level and it greatly limits the adaptivity of a system. we aren't able to completely leverage all the benefits of Object Orientation.

<em>"However, doing encapsulation right is a commitment not just to abstraction of state, but to eliminate state oriented metaphors from programming."</em> - Alan Kay

Now to eliminate the distinction between databases and programs, we need a technology that seamlessly integrates the capabilities of the programs and storage and multi user capabilities of databases. This is exactly what <a href="http://gemstone.com/products/smalltalk/">GemStone/S</a> is, its a Smalltalk dialect, that has object persistance and transactional capabilities baked into the Virtual Machine !. A GemStone/S repository has living objects (there is no seperation between code and data, Code are objects too). GemStone/S is not simply an object oriented database because it not only can stores objects but also can execute them in a muti-user environment. What GemStone/S is, is its a true object server.

So what does this buy us ?
<ul>
	<li>No more object-relational mapping (no need for ActiveRecord, Hibernate, GLORP like ORM's)</li>
</ul>
<ul>
	<li>Makes the software incredibly adaptable, normally if we change the structure of the data defined in a class, we would also need to modify the structure of the database, mapping files etc to reflect the change, so GemStone/S Eliminates need for the synchronization of code and data, because there is no distinction between the two.</li>
	<li>Objects can evolve as the business needs change, Its quite simply to change the shape of a class in a GemStone/s repository.</li>
</ul>
<ul>
	<li>Allows us the ability to create executable business models and objects that cross cut applications, so pure objects can be shared across mutiple applications. The object can expose a specific interface with a set of messages to each application. This way there is a single point of reference for a particular object and also a single point chage for a particular object. (note none of the data is ever exposed to the app, every thing is done through the object interface by sending messages)</li>
</ul>
<ul>
	<li>Check out this <a href="http://www.gemstone.com/pdf/OOCL_SuccessStory.pdf">case study</a> where a large shipping company used GemStone/Smalltalk to create a pure OO solution.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2008-11-21 22:48:54</wp:post_date>
  <wp:post_date_gmt>2008-11-21 22:48:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>why-gemstones</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gemstones"><![CDATA[GemStone/S]]></category>
  <category domain="post_tag" nicename="object-oriented-design"><![CDATA[Object Oriented Design]]></category>
  <category domain="post_tag" nicename="object-persistance"><![CDATA[Object Persistance]]></category>
  <category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
  <category domain="post_tag" nicename="smalltalk"><![CDATA[Smalltalk]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>57</wp:comment_id>
    <wp:comment_author><![CDATA[Why GemStone/S? &laquo; (gem)Stone Soup]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://gemstonesoup.wordpress.com/2008/11/22/why-gemstones/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.44.27</wp:comment_author_IP>
    <wp:comment_date>2008-11-22 16:03:25</wp:comment_date>
    <wp:comment_date_gmt>2008-11-22 16:03:25</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Perumalla has a good post where he answers the question &#8220;Why [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-11-22 16:03:25</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Smalltalk a world of living Objects</title>
  <link>https://isaiahperumalla.wordpress.com/2008/06/10/smalltalk-a-world-of-living-objects/</link>
  <pubDate>Tue, 10 Jun 2008 22:28:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=11</guid>
  <description/>
  <content:encoded><![CDATA[When I first discovered Smalltalk, it took me a while to get my head around the fact that in image based Smalltalk systems, source code is not written in flat files.  Source code in files was so ingrained into my thinking, I had to unlearn and leave a lot of assumptions I have made. In most programming languages programs are written and defined using text files, typically source code is written in text files, using a text editor or an IDE such as Eclipse, IntelliJ or Visual Studio. At this point it just "dead code" in text files, there are no running objects, this is often referred to as compile time. Before a program runs, the runtime environment is created, the program’s source code is parsed, compiled and executed, and  when the program finishes the runtime environment is destroyed, so in essence every time a change is made to source code the entire program is created from scratch. Smalltalk is pure object oriented and everything is an object and everything is achieved by sending messages to objects. In Smalltalk we dont use source code in text files to define programs (classes methods etc) instead objects are used to define Smalltalk programs, objects themselves are used to define new classes method etc. Now an object can exist only at runtime, and in Smalltalk everything happens on the fly, there is no such thing as compile time, Smalltalk is a runtime, it is not just a programming language, its a living system, it is a world of "living objects". This requires a paradigm shift and it often is one of the biggest barriers I find people face when entering into the Smalltalk world. Smalltalk pushes "Object thinking" to another level, but once you push past that barrier you enjoy all the benefits of working with living objects, you can interact with objects, inspect them modify, extended and change them on the fly. This is the main reason why Smalltalk environment have such powerful IDE's.

<strong>So what happens when the smalltalk VM is shut down or not running ? Do the objects then die ?</strong>

No. The objects are in a suspended state or go into hibernation and are stored in an image.  This is analogous to a VMware image, when you close a vmware image the operating system goes into a suspended state, so the next time the vmware image is loaded  to exactly the same state it was before. In Smalltalk objects essentially never die (note objects without any references will be garbage collected), they simply go into a suspended state in the image, in a Squeak Smalltalk image it is very likely some objects are probably 30 years old !

In Smalltalk everything is an object, classes are first class object too, so they can respond to messages just like any other object, so it trivial to create new classes on the fly. The image based system of the Smalltalk might be a stumbling block for people entering into the Smalltalk world but I think this is one of the main things that gives Smalltalk its power, its awesome IDE and the ability to work with live objects makes development so much more productive.

<strong>So Smalltalk code doesnt live in files so what happens to version control systems then ?</strong>

I do most of my Smalltalk development in <a href="http://squeak.org">Squeak </a>and I use <a href="http://www.wiresong.ca/Monticello/">Monticello </a>as the versioning system, in Smalltalk source code itself are represented as objects and are basically modelled as a collection of packages, classes, and methods. Code changes then simply become addition/removal or update of these elements. Since the entire source code are modelled in objects, Smalltalk version control systems have very powerful merge and diff algorithms. The version control systems are language aware and source code changes and history can be tracked down to individual method.

Smalltalk is an amazingly powerful environment, developing in a Smalltalk made me see what<a href="http://gbracha.blogspot.com/2008/06/incremental-development-environments.html"> incremental development is really about</a>. I guess with GemStone now working on a <a href="http://ruby.gemstone.com/">Ruby VM</a> which is primarily based on the <a href="http://isaiahperumalla.wordpress.com/2008/11/21/why-gemstoneswhy-gemstones/">GemStone/S</a> Smalltalk VM, folks from the Ruby world can also experience developing with living objects]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2008-06-10 22:28:00</wp:post_date>
  <wp:post_date_gmt>2008-06-10 22:28:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>smalltalk-a-world-of-living-objects</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="objects"><![CDATA[Objects]]></category>
  <category domain="post_tag" nicename="smalltalk"><![CDATA[Smalltalk]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>42</wp:comment_id>
    <wp:comment_author><![CDATA[markus]]></wp:comment_author>
    <wp:comment_author_email>markus@hotmai.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>80.108.103.172</wp:comment_author_IP>
    <wp:comment_date>2008-06-11 07:02:18</wp:comment_date>
    <wp:comment_date_gmt>2008-06-11 07:02:18</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[But the biggest difference is that Ruby is a "scripting" language (in the sense that you can use it for tasks perl used to be) and came from a very different area. I don't think it will thus ever become similar to Smalltalk,  no matter the VM part (though its cool)

It is interesting to see the two worlds converge in practise (not only about objects &amp; messages)]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-11 07:02:18</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>52</wp:comment_id>
    <wp:comment_author><![CDATA[Srikrishna]]></wp:comment_author>
    <wp:comment_author_email>srikrishna.kotta@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>205.143.204.110</wp:comment_author_IP>
    <wp:comment_date>2008-07-03 14:14:32</wp:comment_date>
    <wp:comment_date_gmt>2008-07-03 14:14:32</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wonderful article. I was a smalltalk developer for long time over 10 years. Currently i work on java application which is rewrite of smalltalk. We still use smalltalk to refer code and for other purposes. I still  love to do work smalltalk because of ease of development and debugging a big time booster. We write code in debugger which gets picked up immediately. That saves lot of time to compile and deploy cycle which is needed for java.

The best example of image and smalltalk objects never die is: Recently, i had to debug something in smalltalk, i had breakpoint in the middle of the process and forgot to resume. I went back to smalltalk image after 3 or 4 days and i could resume the process which worked beautifully. 

Also, it is a big time confidence booster for any developer. I believe it forces to learn more into internals and makes you think of objects which is very good thing in long term. 

Today, i was talking to my long time friend who was a smalltalker. Now he works in .NET and flex applications. I asked him how he was doing with flex development and told him it is kind of difficult to fix problem without external help. He told me, most of things can be fixed after working in Smalltalk. 

I think the reason, you are allowed to see the code even the system code except for VM (Virtual machine). 

lubos -- I guarantee, It will be a good experience for you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-07-03 14:14:32</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>45</wp:comment_id>
    <wp:comment_author><![CDATA[lubos]]></wp:comment_author>
    <wp:comment_author_email>lubosha@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>211.30.186.96</wp:comment_author_IP>
    <wp:comment_date>2008-06-11 14:48:59</wp:comment_date>
    <wp:comment_date_gmt>2008-06-11 14:48:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow, thanks for this introduction. I'm going to research about this language right now, it's kind of refreshing concept when you compare it to Java or C#]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-06-11 14:48:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>56</wp:comment_id>
    <wp:comment_author><![CDATA[mo]]></wp:comment_author>
    <wp:comment_author_email>mo@mokhan.ca</wp:comment_author_email>
    <wp:comment_author_url>http://mokhan.ca</wp:comment_author_url>
    <wp:comment_author_IP>72.53.12.76</wp:comment_author_IP>
    <wp:comment_date>2008-11-05 04:03:01</wp:comment_date>
    <wp:comment_date_gmt>2008-11-05 04:03:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Wow! What a great introduction to Smalltalk. I'm really interested to read more about it. Especially from an OO perspective, and how lessons from Smalltalk can be brought in to the realm of .NET.

Thanks,
Mo]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-11-05 04:03:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>54</wp:comment_id>
    <wp:comment_author><![CDATA[Matt Dunn]]></wp:comment_author>
    <wp:comment_author_email>contact@mattonsoftware.com</wp:comment_author_email>
    <wp:comment_author_url>http://mattonsoftware.com</wp:comment_author_url>
    <wp:comment_author_IP>209.5.189.114</wp:comment_author_IP>
    <wp:comment_date>2008-08-14 16:47:01</wp:comment_date>
    <wp:comment_date_gmt>2008-08-14 16:47:01</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Kent Becks seminal quote on image-based vs file-based development was "Imagine, putting source code in files! How quaint.", says it all really :) 

Cheers,
Matt]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2008-08-14 16:47:01</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>244</wp:comment_id>
    <wp:comment_author><![CDATA[John Gardner, CMC]]></wp:comment_author>
    <wp:comment_author_email>John.Gardner@jvgconsulting.ca</wp:comment_author_email>
    <wp:comment_author_url>http://www.jvgconsulting.ca</wp:comment_author_url>
    <wp:comment_author_IP>69.49.58.195</wp:comment_author_IP>
    <wp:comment_date>2012-06-19 14:18:59</wp:comment_date>
    <wp:comment_date_gmt>2012-06-19 14:18:59</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good article. It makes you wonder, doesn't it? Why if Smalltalk is so good, powerful and efficient (development cycle), does the marketplace prefer Java, C#, C++?

I have returned to Smalltalk time and time again, after deviating to other languages. And you know what? It's still terrific. I have a number of projects and will be developing in Pharo/Squeak and leveraging tools like Pier and Seaside; as well as many of the incredible built-in features. And with the COG VM, speed is incredible.

If everything goes according to plan, I'll develop an outsourcing/development service that offers free conversion to Smalltalk with a signed support plan. 

Also, with the power of Smalltalk, I'll be able to compete against brute-force offshore programming with reuse and development speed.

Finally, I think each of us needs to give ourselves a break -- opportunistically use Smalltalk for new projects instead of Java, C#, C++, Ruby, Perl, Python, etc. Pharo has a stripped down image, which you can tweak, and you can do scripting, full development and web apps with Seaside. 

If all of you prefer to work in Smalltalk because of its benefits, then promote its use in your own shop. Think of ways of using Smalltalk to solve a problem, rather than existing solutions using other languages.

To generate more Smalltalk jobs, we have to create a critical mass of Smalltalk code. Like Alan Kay said "... invent the future".]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1340115540.0794";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1345145996</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1345145996.4305689334869384765625;s:7:"message";s:54:"isaiahperumalla changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"isaiahperumalla";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-06-19 14:18:59</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>  Every DSL ends up being Smalltalk</title>
  <link>https://isaiahperumalla.wordpress.com/2008/10/27/every-dsl-ends-up-being-smalltalk/</link>
  <pubDate>Mon, 27 Oct 2008 15:21:20 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=14</guid>
  <description/>
  <content:encoded><![CDATA["I had this though in my head for a while now. I built an IDE for a DSL, and somewhere toward the end of the first revision I understood something very interesting. My IDE wasn't actually using the textual representation of the language. The scripts that the user was editing were actually <em>live instances, <a href="http://ayende.com/Blog/archive/2008/10/27/every-dsl-ends-up-being-smalltalk.aspx">.......</a>"
</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2008-10-27 15:21:20</wp:post_date>
  <wp:post_date_gmt>2008-10-27 15:21:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>every-dsl-ends-up-being-smalltalk</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="add-new-tag"><![CDATA[Add new tag]]></category>
  <category domain="category" nicename="smalltalk"><![CDATA[Smalltalk]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Iterator Blocks, Deffered execution &amp; Linq </title>
  <link>https://isaiahperumalla.wordpress.com/?p=27</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=27</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li>Intro -yield keyword, compiler generation</li>
	<li>deferred execution</li>
	<li>not just for iterating, simulation co-routines</li>
	<li>iterators block for Linq to objects</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2009-02-05 01:53:09</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Designing inter-object  protocols using mocks</title>
  <link>https://isaiahperumalla.wordpress.com/2009/06/08/designing-inter-object-protocols-using-mocks/</link>
  <pubDate>Mon, 08 Jun 2009 05:15:03 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=29</guid>
  <description/>
  <content:encoded><![CDATA[The intent of my recent <a href="http://www.mockobjects.com/files/usingmocksandtests.pdf">paper</a>, was to demonstrate how mock objects could be used to discover roles, and design the communication protocols between objects. The following content did not make it to the <a href="http://msdn.microsoft.com/en-gb/magazine/dd882516.aspx">final version</a>, I think these are important points so i will describe them here.
<strong>Distinguish between an Object’s Internals and its Peers</strong>
It is important to distinguish what the internals of an object are and who are its peers that it communicates with.  An object’s internals are usually created and used within an object. In my <a href="http://code.msdn.microsoft.com/mag200906TDDMocks">example</a> the fact that the Register object collaborates with the Sale object to calculate the receipt total is hidden. Peer objects, on the other hand, aren’t hidden inside the object, they are a passed in to the object, either through the constructor as a dependency or through a setter (if the peer object is a policy or notification object).
All interactions internal to an object should be hidden from the client code that uses the object; likewise a unit test should not be concerned with the internal details of the object under test.
Exposing an objects internals details to simply test every aspect of a class in pure isolation, causes the tests to be overly coupled to the implementation details of the object. You will find tests using mock objects highlight these design issues very quickly, one hint is when you find that the production code, simply mirrors the expectations you wrote in the test code, this  obviously makes tests very brittle since they overly coupled to the implementation details of the object under test.
This <em>could</em> be addressed by changing the behavior of the mock framework to ignore all calls between the object under test and its collaborator unless explicitly specified.  However this does not address the underlying weakness in the design of the protocol between the object under test and it collaborators, it fact it simply hides all complex inter-object protocols.
<a href="http://natpryce.com">Nat Pryce</a> coined the phrase “A composite object should be simpler than the sum of its parts.”  An object should provide a simpler API to its clients, rather than simply exposing all its internal objects through its API. I find this is a good heuristic to follow when deciding what should be internal to an object and what its peers should be. On the other hand we should ensure we are not hiding the wrong information inside an object. Well-designed objects should be context independent and not tied to its environment; objects tightly coupled to its environment will be difficult to instantiate in a unit test. I find the rapid feedback provided by tests is invaluable when designing objects.

Why did I chose to use NMock ?

A lot of <a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2009/06/07/reflecting-reality.aspx">people ask me why i chose NMock</a>, for this introductory article, I felt NMock 2 is the best choice of API,  because it works best within the context of the article. It has an expectation-based API, which makes designing object communication the focus of testing. Its expectation API acts as a domain specific embedded language that clearly, precisely, and declaratively describes object communication. I also find that NMock2 provides a highly detailed explanation of what has failed, which allows for quick error diagnosis and resolution.

I’m sure many people will have different opinions on this but I have avoided using mock frameworks that use the popular Arrange, Act, Assert (AAA) style because I find that it <em>does</em> <em>not</em> get you started off by thinking about the contracts or communication protocols between objects. With AAA-style mocks I find it’s easy to overlook design flaws in your inter-object communication.

The main drawback of NMock is the use of strings to identify expected methods makes refactoring harder.  This becomes less of an issue when a code based is designed around well-defined roles and responsibilities, containing narrow role based interfaces, which are used more locally.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>29</wp:post_id>
  <wp:post_date>2009-06-08 05:15:03</wp:post_date>
  <wp:post_date_gmt>2009-06-08 05:15:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>designing-inter-object-protocols-using-mocks</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="arrange-act-assert"><![CDATA[Arrange Act Assert]]></category>
  <category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
  <category domain="post_tag" nicename="nmock"><![CDATA[NMock]]></category>
  <category domain="category" nicename="object-oriented-design"><![CDATA[Object Oriented Design]]></category>
  <category domain="category" nicename="test-driven-design"><![CDATA[Test Driven Design]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>69</wp:comment_id>
    <wp:comment_author><![CDATA[isaiahperumalla]]></wp:comment_author>
    <wp:comment_author_email>cappadonza@hotmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://</wp:comment_author_url>
    <wp:comment_author_IP>81.101.139.23</wp:comment_author_IP>
    <wp:comment_date>2009-09-20 20:17:41</wp:comment_date>
    <wp:comment_date_gmt>2009-09-20 20:17:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks
I often program in smalltalk in my spare time, I find mock objects still useful for discovering role in the system. its true interfaces help make roles explicit in a system, in a dynamic language like smalltalk, there are no interfaces, but the smalltalk ide does have concept of protocols, set of messages that an object responds to. This helps to some extent to see what role an object plays.
But i find that the tests make communication protocols more visible and provide a better documentation on this.
Interface dont tell the whole story, there is a suttle difference between protocols and interfaces. it best summed up by this quote 
"an interface describes whether two components will fit together, a protocol describes whether they will work  together. " --from steve freeman and nat pryce book http://tinyurl.com/mtb37n]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>68</wp:comment_parent>
    <wp:comment_user_id>2192464</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-09-20 20:17:41</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>68</wp:comment_id>
    <wp:comment_author><![CDATA[Sjur Kvammen]]></wp:comment_author>
    <wp:comment_author_email>sjur.kvammen@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>88.91.254.203</wp:comment_author_IP>
    <wp:comment_date>2009-09-16 19:18:19</wp:comment_date>
    <wp:comment_date_gmt>2009-09-16 19:18:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great article and a lot of fine points to digest :) But I'm curious, what happens to the process of interface/role-discovery in a dynamic language? It seems interfaces are recording part of the dialogue(protocol) between the objects, Then later you plug in an actual implementor(actor to fill the role). But in a dynamic language you don't have the interfaces to specify/make visible/clearify the roles, so how do you handle it? Do you just skip the interfaces and rely on the tests to document/specify the roles an object needs/expects from its peers? Or?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2009-09-16 19:18:19</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Design for test ?</title>
  <link>https://isaiahperumalla.wordpress.com/2009/08/14/design-for-test/</link>
  <pubDate>Fri, 14 Aug 2009 08:57:08 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=48</guid>
  <description/>
  <content:encoded><![CDATA[Rebecca wrifs-brock recent article discusses this topic <a href="http://www.wirfs-brock.com/PDFs/DesignForTest.pdf">here.</a> its an interesting read]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2009-08-14 08:57:08</wp:post_date>
  <wp:post_date_gmt>2009-08-14 08:57:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>design-for-test</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Overview of modern hardware and Memory Systems</title>
  <link>https://isaiahperumalla.wordpress.com/?p=59</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://blog.entegrity.co/?p=59</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://isaiahperumalla.files.wordpress.com/2012/06/chapter7-1-memory1.pdf">Chapter7.1-Memory1</a>In my recent projects I have been involved with very low latency, high performance systems, when developing systems with very low latency requirements I have realized it is crucial to understand how your code interacts with modern hardware architectures in particular we need to understand the costs of accessing data from hierarchical memory systems found in almost all modern hardware. Its well known there is a growing disparity between the CPU speed and memory speed, where access to memory is becoming the 'bottleneck'. On modern hardware the most common way of handling this is disparity is by introducing memory hierarchies in the hardware as show in the diagram below.

Caches close to the CPU are very fast accessible memory but limited in size. There is a lot of technical details in how caches are designed, although very interesting they may not be relevant from a programmers perspective. checkout this <a href="http://www.akkadia.org/drepper/cpumemory.pdf">excellent paper </a>by Urlich Drepper. However it is crucial to understand how caches work at a high level as memory access patterns can have a huge impact on the performance of programs. for example

<code>
void sumMatrix(Byte *data, unsigned rows, unsigned columns,
long long&amp; sum, TraversalOrder order)
{
sum = 0;
for (unsigned r = 0; r &lt; rows; ++r) {
for (unsigned c = 0; c &lt; columns; ++c) {
if (order == RowMajor)
sum += data[r*columns + c];
else
sum += data[r + c*rows];
}
}
}
</code>

<em><strong>RAM is not Random</strong></em>

When designing programs we can not longer simply assume all access to memory not matter what the memory address is, will have the same latency. Although the bandwidth of different levels of memory is more or less the same, there are huge differences in the latency when accessing different levels of the memory hierarchy, due to this the memory reads are done in blocks and stored in caches close to the CPU, this is to amortize the cost of a memory read from main memory, however this amortization only works on the assumption that once a memory location is accessed it is highly likely that the same memory location will be accessed again (temporal locality) or another memory location close by (spatial locality) will be accessed shortly after. Its important to understand how our programs can take advantage of locality of reference.

<em><strong>Caches</strong></em>
<ul>
	<li>direct memory, fully associative, set associative</li>
	<li>Spatial and temporal locality,</li>
	<li>prefetching, TLB ?</li>
	<li>cache misses</li>
	<li>MESI protocol</li>
</ul>
Measuring

perf linux tools (queue impl, compare)]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>59</wp:post_id>
  <wp:post_date>2013-06-15 19:18:37</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="low-latency"><![CDATA[low latency]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Do mocks create high coupling ?</title>
  <link>https://isaiahperumalla.wordpress.com/2011/10/10/does-mocks-create-high-coupling/</link>
  <pubDate>Mon, 10 Oct 2011 12:09:53 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://blog.entegrity.co/?p=71</guid>
  <description/>
  <content:encoded><![CDATA[In a recent discussion with a colleague, he bought up the age old myth that mock objects are bad because they cause brittle tests and pointed me to this <a href="http://www.ngauthier.com/2010/12/everything-that-is-wrong-with-mocking.html">post</a>. My view is if using mock objects are causing brittle tests it is a hint that there is a issue with the design  of objects collaborating, which needs to be addressed. Mock object are a great tool that aid in the design of OO systems if you subscribe the "mystical view" of object oriented programming as described by these books <a href="http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430/ref=sr_1_1?ie=UTF8&amp;qid=1318245577&amp;sr=8-1">RDD </a>and <a href="http://www.growing-object-oriented-software.com/">GOOS </a>.  <a href="http://www.cincomsmalltalk.com/userblogs/ralph/blogView?showComments=true&amp;entry=3364027251">Ralph Johnson</a> notes "The mystical view is that an OO system is one that is built out of objects that communicate by sending messages to each other, and computation is the messages flying from object to object."

lets start by looking at the example in this <a href="http://www.ngauthier.com/2010/12/everything-that-is-wrong-with-mocking.html">post</a>
<pre>module Codebreaker
  describe Game do
    describe "#start" do
      it "sends a welcome message" do
        output = double('output')
        game = Game.new(output)
        output.should_receive(:puts).with('Welcome to Codebreaker!')
        game.start
      end
      it "prompts for the first guess"
    end
  end
end</pre>
with implementation code as show below.
<pre>module Codebreaker
  class Game
    def initialize(output)
      @output = output
    end
    def start
      @output.puts("Welcome to Codebreaker!")
    end
  end
end</pre>
While it very clear in the above example the implementation code simply duplicate the test code, and severely inhibit any re factoring with out breaking the test code. As the author of the<a href="http://www.ngauthier.com/2010/12/everything-that-is-wrong-with-mocking.html"> blog post</a> points out any of the following implementations are valid but yet they would break the test
<pre>@output.write("Welcome to Codebreaker!\n")

@output.print("Welcome to Codebreaker!\n")

"Welcome to Codebreaker!".split.each{|c| output.write(c)}; output.write "\n"

@output &lt;&lt; "Welcome to Codebreaker!\n"</pre>
The key here is to "listen to the test", there is duplication in test and implementation,  the test is highlighting a serious flaw in the inter-object protocol. One of the things I picked up over the years in various discussions  at<a href="http://xpday-london.editme.com/eXtremeTuesdayClub"> London Xtreme Tuesday</a> group is that an object should send messages to its collaborator in terms of <em>its</em> domain language. In the example above an instance of the Game object sends the message
<pre>:puts</pre>
to its collaborator. now :puts is a meaningless message in terms of the Game. With the mystical style of OO the domain model is in the message flying between the object.
One way to fix the above code is as following. start with an end-to-end test to verify the end result for a given scenario.

the unit test would be as follows
<pre>module Codebreaker
  describe Game do
    describe "#start" do
      it "notifies game has started" do
        gameEventListener= double('gameEventlistener')
        game = Game.new(gameEventListener)
        gameEventListener.should_receive(:new_game_started)
        game.start
      end
      it "prompts for the first guess"
    end
  end
end</pre>
The key thing to note here is that the message <em>:new_game_started</em> is meaningful in terms of the Game objects domain. The role (gameEvenListener) of its collaborator is now made explicit in the test. We can now have an implementation of this role with write out the appropriate welcome message when it receives <em>:new_game_started . </em>While this is very simplistic example and may not seem like there is a huge impact on example, In larger systems I find well designed inter-object object protocols leads to simpler flexible system where behaviour can easily change by composing different objects.

In chapter 6 of the<a href="http://www.amazon.com/Object-Design-Roles-Responsibilities-Collaborations/dp/0201379430/ref=sr_1_1?ie=UTF8&amp;qid=1318245577&amp;sr=8-1"> RDD book</a> the authors describe different control styles in a system.  I find that  mock objects is a tool that guides our design to a "delegated control style" , one of the key characteristic of this style is

"Dialogs between objects are at higher-level.Collaborations between a coordinator and the objects it coordinates are typically higher-level requests for work and not simple requests to store or retrieve data. Communications are more abstract and more powerful. Instead of asking objects to do small chores or divulge small bits of information, coordinators typically delegate larger-grained requests."

At the same time if we distribute responsibilities across too many different objects we have the following side effects "Complicated collaborations between delegator and delegates. This can happen when not enough context is passed along with a delegated request. Lots of collaborations but not much work getting done."

When using mock object the test will be very sensitive to these issues and will highlight these facts by being tightly coupled to implementation details of the object or by awkward tests

To summarize the mains points are we
<ul>
	<li>need to understand the philosophies and ideas of <a href="http://www.purl.org/stefan_ram/pub/doc_kay_oop_en">OO</a>  to effectively use and appreciate mock objects</li>
	<li>Using mock object is a great feedback tool that can be used  to design high level dialogues between objects, brittle tests is usually an indication that the object design needs to be reviewed.</li>
	<li>in an OO system the domain model is in fact in the messages sent between objects.</li>
	<li>Object must send messages to it peers in terms of <em>its</em> domain language.</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>71</wp:post_id>
  <wp:post_date>2011-10-10 12:09:53</wp:post_date>
  <wp:post_date_gmt>2011-10-10 12:09:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>does-mocks-create-high-coupling</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="mock-objects"><![CDATA[Mock Objects]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="category" nicename="test-driven-design"><![CDATA[Test Driven Design]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>143</wp:comment_id>
    <wp:comment_author><![CDATA[Colin Jack (@colin_jack)]]></wp:comment_author>
    <wp:comment_author_email>colin.jack@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/colin_jack</wp:comment_author_url>
    <wp:comment_author_IP>80.254.147.164</wp:comment_author_IP>
    <wp:comment_date>2011-10-24 10:23:42</wp:comment_date>
    <wp:comment_date_gmt>2011-10-24 10:23:42</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Good post.

The adverts at the bottom look a little dodgy though, I'm seeing big flashing green "Download" and "Play Now" buttons.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1319460915</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319460916.4933";s:7:"message";s:54:"isaiahperumalla changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"isaiahperumalla";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1319451822.8418";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-24 10:23:42</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>140</wp:comment_id>
    <wp:comment_author><![CDATA[olaflewitz]]></wp:comment_author>
    <wp:comment_author_email>olaf@lewitz.net</wp:comment_author_email>
    <wp:comment_author_url>http://awelaf.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>87.162.102.133</wp:comment_author_IP>
    <wp:comment_date>2011-10-16 12:29:15</wp:comment_date>
    <wp:comment_date_gmt>2011-10-16 12:29:15</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[great post! Thank you!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>23473556</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1318785833</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1318785833.0681";s:7:"message";s:54:"isaiahperumalla changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"isaiahperumalla";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1318768155.6781";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"olaflewitz";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2011-10-16 12:29:15</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>272</wp:comment_id>
    <wp:comment_author><![CDATA[Rick Pingry]]></wp:comment_author>
    <wp:comment_author_email>rpingry@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>69.92.84.59</wp:comment_author_IP>
    <wp:comment_date>2012-08-16 19:30:26</wp:comment_date>
    <wp:comment_date_gmt>2012-08-16 19:30:26</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This helped a lot, thanks.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1345145996</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1345145996.3008639812469482421875;s:7:"message";s:54:"isaiahperumalla changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"isaiahperumalla";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1345145427.0416829586029052734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2012-08-16 19:30:26</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>356</wp:comment_id>
    <wp:comment_author><![CDATA[daniel rosales]]></wp:comment_author>
    <wp:comment_author_email>dannyrosales@live.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>173.31.131.123</wp:comment_author_IP>
    <wp:comment_date>2015-06-14 12:37:41</wp:comment_date>
    <wp:comment_date_gmt>2015-06-14 12:37:41</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Great explanation! Your messages should speak domain, passing ints and bools is a design smell probably]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1434285462.5158970355987548828125;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dannyrosales";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1434303230</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1434303230</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1434289829.19118404388427734375;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"dannyrosales";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1434303230.68286609649658203125;s:5:"event";s:15:"status-approved";s:4:"user";s:15:"isaiahperumalla";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Revisiting Balanced Trees</title>
  <link>https://isaiahperumalla.wordpress.com/?p=96</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=96</guid>
  <description/>
  <content:encoded><![CDATA[Balanced search trees are extremely useful data structure that are often used as the underlying implementation of symbol tables or dictionaries which maintain the order of the elements based on their keys. While we  for most cases we may not have to implement these from scratch, there are case , you would want to implement an augmented version of a balance search tree to achieve efficient inserts and lookups queries on when dealing with large amounts of data. For example on of my recent projects we had items which had a start date and an end date (a date interval).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>96</wp:post_id>
  <wp:post_date>2011-12-16 16:12:08</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Multiprocessors and Memory Models</title>
  <link>https://isaiahperumalla.wordpress.com/?p=101</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=101</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>101</wp:post_id>
  <wp:post_date>2012-06-04 21:44:14</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Chapter7.1-Memory1</title>
  <link>https://isaiahperumalla.wordpress.com/?attachment_id=106</link>
  <pubDate>Mon, 04 Jun 2012 21:55:26 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.files.wordpress.com/2012/06/chapter7-1-memory1.pdf</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>106</wp:post_id>
  <wp:post_date>2012-06-04 21:55:26</wp:post_date>
  <wp:post_date_gmt>2012-06-04 21:55:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>chapter7-1-memory1</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>59</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://isaiahperumalla.files.wordpress.com/2012/06/chapter7-1-memory1.pdf</wp:attachment_url>
</item>
<item>
  <title>Memory Management algorithms - Reference counting</title>
  <link>https://isaiahperumalla.wordpress.com/?p=109</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=109</guid>
  <description/>
  <content:encoded><![CDATA[Having worked on a number of projects which have strict throughput and /or latency requirements, I have to come to realize,regardless if your are on a managed or unmanaged platform, it essential to have a broad understanding of basic memory management algorithms when performance matters. Armed with a broad overview of various algorithms it much easier to make informed decision on writing and tuning application.

why study it more ?

memory is cheap, core count

Digging a little bit deeper i found memory management algorithms very interesting

In this series of posts i will provide an overview of most fundamental garbage collection algorithms, as most garbage collection strategies are based on either one or a combination of these fundamental algorithms, to compare various algorithms, we need to look at the effect of each algorithm on throughput, latency (pause time) and space usage. We get started by looking at reference counting.

<em><strong>Reference Counting</strong></em>

In any memory management algorithm we need to know if an object is considered live or garbage, reference counting maintains a simple invariant, any object is considered live if the number of references to that object is greater than zero. A reference to an object is create when a pointer to the object is copied from one location to another via an assigment. Each time a reference to an object is created, the objects reference count is increment, similarly when an existing reference to an object is deleted, the reference count is decremented.

<em>Disadvantages- </em>Every-time a variable is changed from one pointer to another two 'reference counts' need to be update, one objects reference count is incremented while the other is decremented and then an additional check to see if the count of the decremented object has reached zero, from an applications point of view even a simple read operation would entail a store operation to memory. More over in a performance sensitive application, lot of updates to pointers will pollute the CPU caches by inducing extra store operations.  This issue is amplified on multi-core machines as increments and decrements need to synchronized by using expensive atomic instructions, which can cause lot of contention on cache lines. Reference counting is often used becasue of its seemingly deterministic and incremental nature, as it distributes the cost of memory management throughout the program. This is not always the case especially in modern multicore machines

The biggest disadvantage is that the basic scheme described above will not handle cyclic pointers, cyclic data structures are not uncommon in most application. The diagram below show what could happen when you have cyclic structures, however with some explicit thought and design by the developer, references to cyclic structures can be handled by  defining explicitly ownership of objects (see share_pointer, weak_pointer in C++ as example). python uses a combination of reference counting and a partial tracing collector

<em>Advantages</em>- This algorithm is simple and has the benefit of being able to be implemented as part of a library (eg C++ boost shared_ptr) a developer can use rather than being part of an underlying managed-runtime. It provides flexibility to use reference counting to only parts of the application and use manual memory management to other parts. On single core machines an advantage of reference counting is object memory is immediately freed as soon as the object is deemed garbage, this makes the algorithm deterministic and incremental in nature.

<em><strong>Mark and Sweep </strong></em>

most fundamental gc algorithm and used a foundation for more sophisticated algorithms

tricolor marking

initially all objects are white (dead objects)

invariant of the algorithm: at en of each iteration of marking loop there are no references from black to white objects.

mark bits stored in objects header

time complexity of mark is O(L) , L = number of live objects

sweep phase O(H) , H = heap size, in practice marking dominates collection time due to cache misses , layout objects or same size in a particular area consistent memory access patterns

once an object is garbage it cannot be accessed by mutator thread, sweep can be done in parallel or by the allocator thread

disadvantages:

fragmentation

operation is expensive need some extra head room in the heap. if allocation rate is too high, gc will be called often and will trash. generally for large heaps atleast 50% space is needed or more is needed [hertz and berger] 2005 say x5 of required heap size if
<ul>
	<li>reference counting</li>
	<li>mark and sweep</li>
	<li>copy collectors</li>
	<li>mark sweep compact</li>
</ul>
precise , conservative collectors
collectors which use copying need to be precise so they can fix the references of live objects once they are moved

GC safe points
Global safe point all threads are at a safe point eg stop the world pause

copy collectors need space-usage:2x live set, monolithic, time linear to live set
mark-compact -&gt; incremental, need at space usage:2x live set, time: linear to live set
mark-sweep-compact -&gt; space: linear to live, time: linear to entire heap

generational collector
heap partitioning
gen hypotesis assumption not often you will have pointers from old-gen to young-gen
ideally
we want young-gen not promoted too soon, but we dont want to wait too long otherwise live-set in young-gen will be ~ young-gen size

old-gen to young-gen pointers
remembered set mark old-gen objects what point to new-gen
remembered set is part of 'root' when examining young-gen live set
every store to old-gen to young-gen write barrier, need to write to rememered set (overhead here)

incremental ie (non monolithic)
serious race conditon
while marking live object, application-threads are running (mutator)
to avoid this
track reference mutations during marking (card table)
revist all mutated references and track new mutations
if the mutations is small do a stop the world.

work grows with mutation rate! may never complete and run out of memory

Azul
Azul had single pass concurrent marker, guarenteed to complete!
concurrent compaction new generation (not copy collector) and old generation
non-stop the world fall back algorithm

incremental compaction
indentify region, which be compacted within a given time
stop the the world and compact the indentified heap
time: possible quadratic to heap size
G1 collector uses this technique

CMS and GC1 have fall back mechanisms<!--more--><!--more-->]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>109</wp:post_id>
  <wp:post_date>2014-03-08 16:59:23</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Memory management part-2</title>
  <link>https://isaiahperumalla.wordpress.com/?p=112</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=112</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li>
<ul>
	<li>partition heap/generations</li>
	<li>card marking/ conditional card marking</li>
</ul>
</li>
	<li>finalizers</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>112</wp:post_id>
  <wp:post_date>2013-04-26 12:48:17</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Memory management algorithms in java</title>
  <link>https://isaiahperumalla.wordpress.com/?p=117</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=117</guid>
  <description/>
  <content:encoded><![CDATA[<ul>
	<li>parallel collectors</li>
	<li>concurrent collectors</li>
	<li>incremental collectors</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>117</wp:post_id>
  <wp:post_date>2013-04-26 12:55:46</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>hardware memory models for programmers</title>
  <link>https://isaiahperumalla.wordpress.com/2013/06/24/hardware-memory-models-for-programmers/</link>
  <pubDate>Mon, 24 Jun 2013 21:32:45 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.wordpress.com/?p=125</guid>
  <description/>
  <content:encoded><![CDATA[Nearly all computer systems now a days have hardware which have multi core chips and shared memory. in this post I will provide a high level overview of TSO (total store order) model which is most common on all x86 processors. It ends with an abstract model software developers can use to reason about low-level concurrency code running on modern multi-core shared memory systems.

Hardware designs have advanced at an incredible pace in last 10 yrs, modern multi-core systems have numerous performance optimizations that have observable consequence for multi-threaded concurrent programs. At a very high level a multi-core chip could look like the diagram below

<a href="http://isaiahperumalla.files.wordpress.com/2013/06/microarchitecture.jpg"><img class="alignnone size-medium wp-image-126" alt="microarchitecture" src="http://isaiahperumalla.files.wordpress.com/2013/06/microarchitecture.jpg?w=300" width="400" height="341" /></a>

Each core modern processor have multiple execution units, which allow instruction level parallelism (ILP) techniques such as pipe-lining  superscalar execution and branch prediction to overlap the execution of many instructions.  CPU speeds have out paced memory system by orders of magnitude, to amortize the cost to access memory each core has it private caches and additional cache which is shared among all cores on the chip. The internal details of each core is complex as shown in the image below

<a href="http://isaiahperumalla.files.wordpress.com/2013/06/sandybridgemicroarchitecture1.png"><img class="alignnone size-large wp-image-155" alt="SandyBridgeMicroarchitecture" src="http://isaiahperumalla.files.wordpress.com/2013/06/sandybridgemicroarchitecture1.png?w=590" width="590" height="453" /></a>

From a <em>correctness</em> point of  view most of the internal components are invisible or cannot be observed by software, one of the components to keep a note of is the store buffers of each core. Even with the hierarchy of fast caches to main memory , the core often stall while accessing memory, to further hide this latency each core has it own private load and store buffer which basically a FIFO queue which buffer pending writes and reads from memory. We will see later that store buffer <em>does</em> have observable consequences for multi-threaded programs.

<strong>why memory model</strong>

Memory model allow programmers to reason about the correctness of their programs, it also help programmer get most out the performance optimizations modern multi-core systems  can make.   In a multi-core shared memory system, the reads and writes of multiple threads is non-deterministic and allow many correct execution while disallowing some. What is allowed and what is disallowed varies across processor implementations. Here we will simply focus on x86 processors, from a software perceptive we can observe what is allowed behavior by analysing the results of memory reads and writes. Lets now explore the allowed globally visible states from program below running on a x86 intel processor (intel core i3)
<pre>// x and y are initialised to 0</pre>
<table>
<tbody>
<tr>
<th>Core-0</th>
<th>Core-1</th>
</tr>
<tr>
<td>x = 1</td>
<td>y = 1</td>
</tr>
<tr>
<td>r0 = y</td>
<td>r1 = x</td>
</tr>
</tbody>
</table>
The interesting thing in the example above is there is only a <em>writer</em> to any given memory location at any time. On a multi-core processor what could the end results of x and y be?  Intuitively we can consider all possible in<em> program-order</em> executions,   see that any of the values below could be expected.
<table>
<tbody>
<tr>
<th>step-1</th>
<th>step-2</th>
<th>step-3</th>
<th>step-4</th>
<th>(r0, r1)</th>
</tr>
<tr>
<td>core-0: x=1</td>
<td>core-0: r0=y</td>
<td>core-1: y=1</td>
<td>core-1: r1=x</td>
<td>(0,1)</td>
</tr>
<tr>
<td>core-1: y=1</td>
<td>core-1: r1=x</td>
<td>core-0: x=1</td>
<td>core-0: r0=y</td>
<td>(1,0)</td>
</tr>
<tr>
<td>core-1: y=1</td>
<td>core-0: x=1</td>
<td>core-1: r1=x</td>
<td>core-0: r0=y</td>
<td>(1,1)</td>
</tr>
<tr>
<td>core-1: y=1</td>
<td>core-0: x=1</td>
<td>core-0: r1=y</td>
<td>core-1: r0=x</td>
<td>(1,1)</td>
</tr>
<tr>
<td>core-0: x=1</td>
<td>core-1: y=1</td>
<td>core-0: r0=y</td>
<td>core-1: r1=x</td>
<td>(1,1)</td>
</tr>
<tr>
<td>core-0: x=1</td>
<td>core-1: y=1</td>
<td>core-1: r1=x</td>
<td>core-0: r0=y</td>
<td>(1,1)</td>
</tr>
</tbody>
</table>
The sequential semantics that is intuitive for most us is called sequential consistency model.
Sequential<em> consistency</em>: the result of any execution is the same as if the read and write operations by all processes were executed in some sequential order and the operations of each individual process appear in this sequence in the order specified by its program [Lamport, 1979].

As we can see it the table above , assuming each processor executed in-program order , There is no interleaving execution that could produce a state where (r0,r1) = (0,0). If the state were to occur (r0,r1) = (0,0) , it would appear from a software point of view as if either core-0 or core-1 effectively executed their instructions out of sequence, clearly this would not satisfy sequential consistency conditions. As we will as demonstrated in the program below on x86 processor are not sequentially consistent as the state (r1,r2) = (0, 0) is in fact valid execution !

[gist https://gist.github.com/isaiah-perumalla/5809246 /]

Since we are focusing on the behavior of the hardware, we want to ensure the gcc compiler does not reorder any of the instruction,
<pre> asm volatile ("" ::: "memory");</pre>
directive on lines 10 and 18 ensure compiler optimization will not reorder the statements.

Compiling the above code with gcc
<pre> gcc -O2 x86mmodel.c -o x86mmodel -pthread 

running the code we get the result below
<a href="http://isaiahperumalla.files.wordpress.com/2013/06/screenshot-mmodel7.png"><img class="alignnone size-full wp-image-157" alt="Screenshot-mmodel7" src="http://isaiahperumalla.files.wordpress.com/2013/06/screenshot-mmodel7.png" width="590" height="131" /></a></pre>
A memory model is a specification that shows the allowed behavior of multi-threaded programs running on shared memory , multi core processors so programmer know what to expect when writing programs on these systems, the behavior is defined simply  in terms of memory reads and writes of memory locations  without any references to caches or memory subsystems. From a correctness point of view cache coherence protocol on the hardware make the cache subsystem functionally invisible to the programmer. That is by simply analysing the results of memory read and memory writes if a system has caches or not. (Note from a performance perspective its crucial to know the memory access patterns and how the caches are utilized by the program, you can infer cache structure by timing your programs which use different memory access patterns).  What is visible to the programmer however is the effects of private store buffers of each core as we demonstrated in the example the write to memory by each core are queued its private store buffer, while each core can read its most recent buffered write ,  the writes in the buffer are invisible to other cores. So before each core's buffered writes have propagated to the memory subsystem, each core could already executed the next read instruction,  this effectively has the same effect as a memory read instruction getting ahead of an older memory write instruction, according to the x86 TSO memory model this is valid execution. So it clear from this example a programmer model of the hardware must account for the store buffer. To understand and reason about the x86 memory model the following simpler hardware model is sufficient for a programmer.
<a href="http://isaiahperumalla.files.wordpress.com/2013/06/memorymodel.png"><img class="alignnone size-full wp-image-189" alt="Memorymodel" src="http://isaiahperumalla.files.wordpress.com/2013/06/memorymodel.png" width="400" height="400" /></a>

In the abstract model above the programmer can simply view each core (hardware thread in this context) as having it own private store FIFO buffers, all writes get queued into the store buffer and each core can 'snoop its own buffer' , that is read its most recent buffered write directly from its buffer (other cores will not see the buffered writes until it is propagated to memory). As the example demonstrated the x86 memory model in a mulit-core execution the store buffers are made visible to the programmer, the consequence of this is the x86 model, has slightly weaker memory model than sequential consistency called the Total store order. In a TSO model following operations must be visible to all cores as if they were executed sequentially
<ul>
	<li>Load  are not reordered with other loads</li>
	<li>Store  are not reordered with other stores as every write is queued in a FIFO buffer</li>
	<li>Loads <em>can</em> be reordered with earlier stores to different memory location. Load and stores to same memory location will not be reordered</li>
	<li>Memory ordering obeys causality (ie stores are seen in consistent order by other processors)</li>
</ul>
What can programmers do to strengthen the model ?

Since a Store followed by a Load can appear out of order to other cores, however programmers may wish to ensure load and store instructions to be ordered across all cores , the x86 processor have a 'mfence' (memory fence) instruction. the mfence instruction will ensure a core will not only reorder the instructions, but also will ensure that any buffered stores in the cores private store buffer are propagated to the memory subsystem before executing instructions after mfence. with this instruction we can strengthen the memory consistency model when required by the software. By adding the mfence instruction to our previous example , it should never be possible to get a state where (r1,r2) = (0,0)

[gist https://gist.github.com/isaiah-perumalla/5815957/]

The above program should not terminate, as there can never be a case where (r1,r2) = (0,0).

x86 processor also have a number of atomic instructions, such as XCHG which swaps the data between two memory locations atomically at the hardware . All atomic operations implicitly also drain the store buffer and prevents core from reordering instructions. In the next post we will go through practical examples of using memory models to reason about correctness and improve performance.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>125</wp:post_id>
  <wp:post_date>2013-06-24 21:32:45</wp:post_date>
  <wp:post_date_gmt>2013-06-24 21:32:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hardware-memory-models-for-programmers</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="concurrency"><![CDATA[concurrency]]></category>
  <category domain="category" nicename="low-latency"><![CDATA[low latency]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[2192464]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>microarchitecture</title>
  <link>https://isaiahperumalla.wordpress.com/2013/06/24/hardware-memory-models-for-programmers/microarchitecture/</link>
  <pubDate>Sat, 15 Jun 2013 20:05:41 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.files.wordpress.com/2013/06/microarchitecture.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>126</wp:post_id>
  <wp:post_date>2013-06-15 20:05:41</wp:post_date>
  <wp:post_date_gmt>2013-06-15 20:05:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>microarchitecture</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>125</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://isaiahperumalla.files.wordpress.com/2013/06/microarchitecture.jpg</wp:attachment_url>
</item>
<item>
  <title>SandyBridgeMicroarchitecture</title>
  <link>https://isaiahperumalla.wordpress.com/2013/06/24/hardware-memory-models-for-programmers/sandybridgemicroarchitecture/</link>
  <pubDate>Tue, 18 Jun 2013 17:38:27 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.files.wordpress.com/2013/06/sandybridgemicroarchitecture.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>150</wp:post_id>
  <wp:post_date>2013-06-18 17:38:27</wp:post_date>
  <wp:post_date_gmt>2013-06-18 17:38:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sandybridgemicroarchitecture</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>125</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://isaiahperumalla.files.wordpress.com/2013/06/sandybridgemicroarchitecture.png</wp:attachment_url>
</item>
<item>
  <title>SandyBridgeMicroarchitecture</title>
  <link>https://isaiahperumalla.wordpress.com/2013/06/24/hardware-memory-models-for-programmers/sandybridgemicroarchitecture-2/</link>
  <pubDate>Tue, 18 Jun 2013 21:03:55 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.files.wordpress.com/2013/06/sandybridgemicroarchitecture1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>155</wp:post_id>
  <wp:post_date>2013-06-18 21:03:55</wp:post_date>
  <wp:post_date_gmt>2013-06-18 21:03:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>sandybridgemicroarchitecture-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>125</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://isaiahperumalla.files.wordpress.com/2013/06/sandybridgemicroarchitecture1.png</wp:attachment_url>
</item>
<item>
  <title>Screenshot-mmodel7</title>
  <link>https://isaiahperumalla.wordpress.com/2013/06/24/hardware-memory-models-for-programmers/screenshot-mmodel7/</link>
  <pubDate>Tue, 18 Jun 2013 21:15:35 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.files.wordpress.com/2013/06/screenshot-mmodel7.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>157</wp:post_id>
  <wp:post_date>2013-06-18 21:15:35</wp:post_date>
  <wp:post_date_gmt>2013-06-18 21:15:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot-mmodel7</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>125</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://isaiahperumalla.files.wordpress.com/2013/06/screenshot-mmodel7.png</wp:attachment_url>
</item>
<item>
  <title>Memorymodel</title>
  <link>https://isaiahperumalla.wordpress.com/2013/06/24/hardware-memory-models-for-programmers/memorymodel/</link>
  <pubDate>Mon, 24 Jun 2013 21:00:36 +0000</pubDate>
  <dc:creator>isaiahperumalla</dc:creator>
  <guid isPermaLink="false">http://isaiahperumalla.files.wordpress.com/2013/06/memorymodel.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>189</wp:post_id>
  <wp:post_date>2013-06-24 21:00:36</wp:post_date>
  <wp:post_date_gmt>2013-06-24 21:00:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>memorymodel</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>125</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://isaiahperumalla.files.wordpress.com/2013/06/memorymodel.png</wp:attachment_url>
</item>
  </channel>
</rss>
